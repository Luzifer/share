// Code generated by go-bindata. DO NOT EDIT.
// sources:
// frontend/app.js
// frontend/index.html

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataFrontendAppjs = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x79\xf9\x92\xdb\x38\x92\xf7\xab\x50\xe8\xfa\x54\x80\x85\xa2\x54\xb6" +
	"\xe7\xdb\x0e\xd2\xe8\x9a\x3e\x3c\xd3\xde\x68\x77\x6f\xf8\xf8\x8b\x92\x27\x20\x32\x25\xc2\xa6\x00\x0e\x00\xd6\xb1" +
	"\x12\xdf\x7d\x03\xe0\xa9\xa3\x7a\x77\x76\x23\xec\x12\x88\x23\x91\xc8\xe3\x97\x99\xc0\x64\x53\xc9\xd4\x0a\x25\x31" +
	"\x90\xfd\x3d\xd7\x81\x65\xfb\x3a\xee\x3a\x03\x89\x35\xd9\x8b\x0d\xb6\x89\x5e\x11\x0d\xb6\xd2\x32\x70\xed\x10\x1e" +
	"\x4b\xa5\xad\x89\xdd\x12\xc5\x5c\x17\xdb\x8b\x48\xd3\x22\x9a\xdc\xd2\x76\x30\xda\xd7\x75\xdc\x2e\x02\xb7\x28\xe5" +
	"\x45\x81\x55\xb7\x96\x2a\x3a\xb4\x25\xa1\x2a\x2c\xd8\x64\x31\xf4\xd5\x32\xdc\x31\xa0\x32\x4c\x99\xa5\x32\xcc\xd8" +
	"\xc0\x2a\xb5\x54\x93\xbd\x0c\x95\x6b\x92\xc3\xe1\x8f\xf5\x57\x48\x6d\x98\xc1\x46\x48\xf8\x0f\xad\x4a\xd0\xf6\xc9" +
	"\x4f\xdb\x83\xac\x76\xa0\xf9\xba\x80\x68\xb2\xa0\x5b\xb0\x91\xae\x49\x4d\x65\xa8\xd9\xf8\xe8\xa8\x92\xcd\xea\x0c" +
	"\x4d\x98\x7d\x2a\x41\x6d\x82\x8f\x4f\xbb\xb5\x2a\xa6\xd3\xe6\x37\xb4\xea\xa3\xd5\x42\x6e\x3f\xf1\xed\x74\xfa\xdc" +
	"\x8e\xe7\x73\xe9\xfe\x9e\x17\x15\x44\xe8\xbd\xca\xaa\x02\x50\x4d\xe8\x73\x8b\xd1\x3f\xfe\x01\xa6\x9d\xd6\x2d\x9b" +
	"\x2c\x1a\x76\xed\xd1\xf1\xbd\x52\x6e\xa7\x76\x3a\xc5\xc0\xdc\x01\x08\xfd\x7e\x6a\x3b\x0d\x41\x2c\x36\xf8\xb5\x1b" +
	"\x45\xca\x6f\x85\x58\x77\x26\x98\x4e\xdd\xbf\x70\xd8\x69\x58\xe4\x74\xa9\x59\xcb\x5c\xaa\x81\x5b\xc0\xb2\x2a\x0a" +
	"\xe2\xc8\xc9\x50\x63\xfd\x1c\xeb\x9a\xa2\x0c\x36\xbc\x2a\x2c\x3a\x95\x78\x73\x0a\xa8\x09\x7d\xe9\x19\x32\x5e\x2e" +
	"\x83\x90\x81\x6c\x94\xc6\xde\x8c\x02\x21\x03\x20\x32\xcc\xb0\xa6\x8a\xf6\xc7\xb5\x64\xdf\x1b\x91\x5d\xd5\xe1\x5a" +
	"\xc8\xcc\xf3\x45\x15\x21\x9d\x7d\x69\x27\x23\xc9\xce\xad\xf9\xe4\xb4\x77\xfd\x8c\x81\x6a\xd8\xf2\x5e\x47\x17\x06" +
	"\x7b\x0b\x76\x7c\x59\x8a\x38\xa2\x96\x50\xeb\xb6\x53\x27\x2a\x69\x27\xb6\x22\x2a\xb5\xb2\xca\x1d\x32\xcc\xb9\xf9" +
	"\xe3\x41\x76\xc2\x6a\xbc\xc0\x2d\x70\x34\x4a\x86\x10\x95\x58\x86\x86\x2d\x48\x8d\x93\x23\x1b\x97\xce\x2e\x0d\x04" +
	"\x4e\x66\xa9\x45\xad\x82\x46\x4c\xf6\x7e\x0a\x0d\x07\x9d\x28\x25\x5b\xc4\xf2\x8d\x0d\x0b\x90\x5b\x9b\xc7\x72\x36" +
	"\x6b\xc4\xa1\x99\x4d\xe4\x2a\xd6\xe1\xa0\x23\x36\xfe\x38\x1c\x26\xb7\x54\x87\xa9\x92\x1b\xb1\xad\x9a\xf1\xc9\x82" +
	"\x22\xaf\x44\x24\x64\xa0\xa7\x53\xac\xc3\x07\x2d\x6c\x3b\xf6\xbc\x31\xeb\xf0\x1b\x3c\x51\x4d\xea\xba\x95\xcb\xa0" +
	"\x50\x2a\x9d\xfb\x76\x72\x9d\x4e\x01\x8f\xc4\xe5\xa0\x40\xfb\x3e\xaa\x9d\xa0\x6b\x4c\x62\x89\x6f\x49\x0b\x35\x5e" +
	"\xf1\xe2\x19\x21\x90\xfd\xe4\xcc\x4b\x26\x18\x02\x21\x8d\xe5\x32\x75\xf6\x66\x09\xb1\xb9\x56\x0f\x81\x84\x87\xe0" +
	"\xd3\x53\x09\x6f\xb5\x56\x1a\xa3\x9f\xb9\x94\xca\x06\x4e\x39\x01\x0f\xd2\x82\x1b\x13\x70\x13\xf0\x9e\x6d\x44\x6a" +
	"\x6c\x73\x61\x28\x90\xee\x44\x1a\x03\x4d\xf6\xdf\xe0\x29\x42\x42\x0a\x8b\x5a\x63\x1f\xf1\xe6\x78\x06\xe6\x96\xc5" +
	"\x57\xf8\x41\xc8\x4c\x3d\x90\xc6\x80\x51\xce\x4d\x9e\xe6\x5c\x6e\x01\x1d\xd9\xba\xb7\x97\xfc\x37\xc5\x33\x4c\xea" +
	"\xe6\xd4\x96\xa1\x8f\x39\xd7\x10\xfc\x35\x40\xb3\x86\x4a\x58\xa8\x94\xbb\x25\x61\xae\x8c\x8d\xaf\x30\xb2\xc2\x16" +
	"\x40\x43\x5e\x96\xbe\x85\x48\x68\xe1\xd1\x62\x67\xac\xb9\x30\x63\xa2\x35\x6d\x78\x86\xdd\x1a\xb2\xbf\x89\x02\xde" +
	"\xc9\x8d\xfa\x53\xe6\xa9\x65\x5c\x6f\xab\x1d\x48\x6b\x5a\xa3\xfa\x61\x31\x9d\xde\x2b\x91\x05\x8b\x09\x1b\x06\x93" +
	"\xc5\xea\x6e\xfc\x11\x21\x14\x23\x34\x61\xcc\xde\x61\xc5\x2c\xbd\x0a\xf9\x57\xfe\x88\x2d\xdd\xef\xc0\xe6\x2a\x8b" +
	"\xd0\xaf\x6f\x7f\xfc\x05\x51\x53\xa5\x29\x18\x13\x9d\xda\x88\x13\x86\xcc\x0a\x78\xeb\x58\x6d\x3b\x6b\x0a\x4e\x65" +
	"\x47\x73\x47\x33\xbd\x3a\x5d\x57\x5d\x13\x12\xb5\x67\xef\x47\xde\x83\x31\x7c\x0b\x18\xb9\x73\x07\x4e\xe3\x1b\x55" +
	"\xc9\x0c\x0d\x52\x19\x6d\x78\x26\x93\xd6\x29\x5b\x57\x72\x82\x11\x4c\x86\x5b\xb0\x1f\xc0\x94\x4a\x1a\xf8\x15\x78" +
	"\x06\xce\x9a\x94\xb4\x20\xed\x8d\x33\x30\xe4\xf1\xf3\x0a\x23\xe7\x57\x96\x0b\x09\x1a\x91\x30\x17\x19\x60\x42\x5d" +
	"\xf7\x46\x14\x20\xf9\xae\x57\x99\x0a\x4d\xb5\x6e\x70\x12\xab\xb0\xe0\xc6\xbe\x93\x19\x3c\xfe\xb1\xc1\x68\x8e\xc8" +
	"\xec\x96\x0c\xcb\x0a\x21\xbf\xdd\xe4\x1a\x36\x88\x84\xdc\x5a\x8d\x91\xff\xa0\x8a\x50\x11\xee\xb8\x4d\x73\x3c\xff" +
	"\x22\x76\x7c\x0b\xcb\xf9\x9c\x74\x50\x7f\xb4\xda\xe8\xb4\x5f\xec\xda\x6e\xad\x57\xac\x9b\x65\x72\xf5\x70\xe3\xd7" +
	"\x23\xe2\x3f\xb0\x3f\xcc\x40\xfb\x5e\x64\xa0\x3c\x6d\x2f\x15\xce\xae\x30\x7a\x63\x54\xa5\x53\xf8\x01\xf5\xe8\xcc" +
	"\x4f\xe8\x73\x67\xa6\x20\xb3\x4f\xca\xc9\xc5\xd3\x40\xe4\x74\xdb\xb6\xbb\xdd\xb6\x3e\xda\x96\x57\x99\x50\xcb\x39" +
	"\xe6\x3c\x3d\xec\xca\x57\x87\x5d\x09\x5b\x72\xd5\x71\x61\x2e\x73\x61\x4e\xb8\x30\x47\x5c\x78\x92\xe7\x5c\xb4\xdd" +
	"\x3d\x17\x3d\x0b\xd8\xe9\x6a\x39\x3f\xf0\xb2\x2c\x44\xe3\x8b\xcb\xf9\x57\x7e\xcf\x4d\xaa\x45\x69\xc9\x9c\xdc\xb5" +
	"\xd6\xae\xe8\x3e\xe3\x96\x3b\x5b\x88\x90\x5b\x85\x68\x67\xfd\x7f\x7f\xfb\xe9\x82\xf1\x03\xd9\x5f\x61\x94\xaa\xac" +
	"\x37\x09\x68\x54\xee\x39\xf2\x14\x3a\x86\x68\x5e\x7c\x35\xa1\x43\x9f\x5f\xc5\x36\x2f\xc4\x36\xb7\xce\x6c\xce\x9d" +
	"\xa4\x89\x50\x47\x4e\xe2\x63\x50\x4d\xa2\x9e\xf2\x16\x24\x68\x91\x0e\xa7\x3d\xf1\x09\xb7\xea\x92\x4f\x34\x52\x97" +
	"\x0c\xa1\xd8\x3c\x08\x27\x1e\x08\x8d\xe5\xb6\x32\x64\x9f\x72\x03\xc1\xeb\xc5\xeb\x48\xb2\x53\x9f\x8b\xd7\x1a\xf8" +
	"\xb7\xb8\x9d\xf1\xca\xcd\xf8\x5d\xd9\x80\x17\x85\x7a\x80\x2c\xb0\x2a\xe0\x5e\x30\x81\xb3\xd5\x6e\x76\x1b\xab\xdd" +
	"\xe4\x8f\xca\x89\x51\xc8\x6d\xf0\x00\xd2\x06\x0f\x5a\xc9\x2d\xaa\x9f\xf3\x78\x79\xf1\x38\xed\xe8\xf9\xa9\xbc\x0a" +
	"\x42\x2f\xc4\x13\x25\x3c\xe3\xc5\x5e\x82\xdd\xfc\x33\xf9\x35\xe0\xfb\x2c\xc8\x9e\x81\x3a\x37\xf9\x08\x05\x6e\x49" +
	"\xec\x8f\x75\x84\xd8\x18\x48\x5d\xaf\x08\x05\x17\x21\xaf\xf0\x88\x26\x76\xb1\x4d\x10\x6f\x16\x2e\x88\xd4\xf4\x32" +
	"\x82\x49\xfc\x92\xc4\x5d\x46\xd6\xa7\x88\x3e\xc6\xb3\x24\x81\x50\x50\x4d\x11\x5a\xad\xba\xd8\xbb\xcf\x77\xda\xe5" +
	"\x74\x56\x73\x69\x36\x4a\xef\xa2\x26\x02\x50\x21\x0d\x68\xfb\x4e\x5a\xd5\xf6\xd4\xb1\xc4\xaf\x89\xcb\xe3\x48\xac" +
	"\xfd\xb1\x0a\xe3\x72\xd5\x2e\xb7\x67\x5d\xe7\x05\xde\x46\xb3\x24\x7e\x45\xf0\xe4\x96\x90\xb0\xac\x4c\x8e\x3d\x4b" +
	"\x8d\xa3\xee\x1f\x44\x66\xf3\xe8\xfb\xc5\xff\xab\xf3\xdb\xbd\x53\xcf\x0d\x2f\xc4\x56\x46\x29\x48\x0b\x3a\xde\x28" +
	"\x69\x6f\x8c\xf8\x4f\x88\xfe\xed\x2f\xe5\x63\x9d\xbf\xfc\xd3\x39\x2f\x5f\x97\x8f\x75\xa9\x21\x70\x3e\xb7\x4f\x55" +
	"\xa1\x74\xf4\x1d\x7c\xff\x0a\xbe\x4f\xeb\x41\xdf\xfb\x1d\xd7\x5b\x21\x6f\xac\x2a\xa3\x57\x8b\xf2\xb1\x3e\xf2\x1a" +
	"\x3a\x02\x4b\x3a\x42\x30\x3a\xc2\x11\x3a\x78\x30\x1d\x19\xcc\x3e\x13\xa6\x2c\xf8\x53\x24\x95\x84\x7a\x29\x91\x93" +
	"\xfa\x89\x64\x5c\x84\xeb\xc4\x72\x9e\xe5\x26\xab\x0e\xe4\x6c\x5f\x7b\xb0\xf3\x6c\xd6\x1b\xd1\x8e\x97\x78\x9c\x70" +
	"\x34\xbe\x7b\xc9\x9f\x21\xb9\x5d\x1d\x0e\x08\x51\xcd\x20\x79\xb5\x72\xc8\x3f\xd1\x5d\x10\x91\xee\xd3\x65\xf4\x7d" +
	"\x82\xd4\x5b\xd0\xda\x2a\xde\xd0\x50\x47\xbc\x36\x2b\xd1\xfc\xc5\x77\x41\x03\xce\xef\x79\x59\x0a\xb9\xfd\xfc\xe1" +
	"\x37\xe6\x10\x32\x1a\x61\xe9\xfc\xab\x51\x32\x4e\x73\xae\x0d\x58\x56\xd9\xcd\xcd\xf7\xf1\x9a\x1b\xf8\xff\xaf\x29" +
	"\x9a\xb9\x0d\x70\x25\xc1\xa4\xbc\x04\x0c\xd2\xa9\xed\xf3\x87\x77\x3f\xab\x5d\xa9\x24\x48\x8b\xff\xfd\xe3\x1f\xbf" +
	"\x87\x8d\x61\x8b\xcd\x93\xab\x8f\x08\x99\xa1\xe0\xc5\x1c\xd5\xae\x8a\x11\x4c\x87\x0d\x07\x27\xe2\xb8\xc4\xa4\xe3" +
	"\x0e\xcd\xba\x05\x1f\x94\xb2\x33\x68\x69\x75\xa1\x25\x91\x2b\x67\x26\x29\xb7\x58\x90\xae\x95\xa8\x15\x09\xbf\x2a" +
	"\x21\x31\x5a\xba\xec\x71\x98\x3a\xea\xc4\x96\x42\x1f\xa0\x6c\xf2\x72\x75\x87\xfe\xba\x83\x4c\xf0\x00\xcd\xdc\xe7" +
	"\x0c\xed\xd1\x4c\xce\x50\x8d\x22\x59\x77\xe4\x10\xa9\xa9\x0d\xc5\x58\x67\xae\x54\x38\x75\x64\xf0\xd5\x61\x92\xf8" +
	"\x94\x19\x5a\x4f\xee\x4a\x04\xcd\xf6\x35\x55\x6c\x11\xab\x37\xde\x2a\xda\x52\x41\x75\xa5\x82\xf0\xf9\x4d\xa2\x56" +
	"\xc9\x62\x15\x23\x59\xed\xd6\xa0\x07\xd2\xc2\x61\x44\x22\x56\xae\x02\xa8\x1d\xc9\x86\x12\x9c\x91\xe1\x0c\x12\x75" +
	"\x81\x00\x4f\x16\xab\xe9\x54\x27\xee\x77\x75\x38\x60\x39\x9d\x4e\xb8\x3b\xbe\xfb\xc3\x64\x24\xa7\x53\xec\x9b\x08" +
	"\xa3\x19\xf7\x82\x20\x01\x97\x59\x80\xbd\x38\x08\x22\xd4\x36\xa0\xc0\x89\xc3\x59\x5b\x3f\x07\x72\xfe\x98\x67\x1e" +
	"\x13\x9f\x16\x25\xbd\x8f\x34\x00\xc6\x18\x73\xc5\xb5\x65\xe0\x92\x84\xe2\xa9\x49\xfd\xfb\xd4\x96\x34\x95\xc9\xf9" +
	"\xea\x06\xc8\xa7\xd3\x4c\xa5\x7e\xe6\xd0\x0a\x79\x51\x4c\xa7\x93\x16\xe9\xb9\x55\xeb\x9a\x8c\x0b\x99\xf1\xfd\xcb" +
	"\x29\x73\xe0\x2b\x99\x0b\x9e\x36\x54\xef\x4d\x62\x36\x30\x9f\xc0\xea\xdc\xb5\x7b\x36\x7b\xa6\xfe\x59\x81\x7e\xfa" +
	"\x08\x05\xa4\xd6\x65\x04\xa4\x6e\xca\xd3\xb6\xd0\x71\x24\x5b\x86\x7f\xfd\xf4\xfe\xb7\x77\x7f\xd3\x7c\x07\x6f\x0b" +
	"\x68\x4e\x26\xc7\x75\xd5\x73\xd3\x88\xd5\x4f\x7b\xc9\xa4\x87\x51\x90\xf6\x97\x6e\xe7\x1c\x78\x56\xa7\x3e\x99\x02" +
	"\xe2\x66\x54\x45\x51\x3b\xb6\x99\xac\x7b\x7f\x80\x95\xab\xff\x28\x6f\xca\x3e\xc3\x16\xb4\x62\xc9\x8a\xa6\x4c\xe2" +
	"\xbf\x90\xe1\x9a\x6a\x73\xa9\xfc\x85\xb3\xf2\x57\x31\x48\xe4\xca\x79\x7f\xa2\x42\x91\x79\x40\x13\x64\x2f\x42\x0d" +
	"\x1b\x33\x9b\xf5\xbe\xc1\xd9\x22\xe6\x6f\x44\x58\x72\xdd\xd7\x3b\x31\x9f\xcd\x48\xdb\x95\xf0\x15\x56\x7d\xb3\xf1" +
	"\xa9\x98\xbf\x51\xcf\x2e\x68\x2c\x75\x3d\x5a\x44\x2d\x21\x35\x14\x06\xda\x84\x35\x59\x79\x2a\xcd\xce\x17\x08\x3d" +
	"\x43\x22\x6e\x4f\xc2\xf6\x22\x8b\x5c\x8b\xba\xa3\x44\xb7\xd4\x4f\x8a\x4c\x5d\xd7\x75\x2f\xa5\xe2\x54\x4a\xc9\x8a" +
	"\x8e\x60\xe0\xdc\x79\x85\x77\x5e\xca\x99\x0d\x1d\xf4\xde\x89\x64\xb1\x9a\x35\xed\xc8\xb5\xa9\x61\xfb\xd4\x98\x48" +
	"\x24\xb7\x2b\xea\x51\x2b\x12\xc9\xcb\x15\xed\xc1\x3d\x12\xc9\xab\x55\x1d\xeb\x84\xaf\xee\xdc\x9f\xb1\x34\x0c\x89" +
	"\x64\xd3\x72\x23\xfe\x00\xbc\x65\x3b\x31\xab\xba\x2f\xb2\xe5\x70\x80\x6c\x1c\x9c\x04\x86\x70\xc8\x3b\xbc\xa9\x4e" +
	"\xe4\xa8\xb6\xef\xea\x7a\x55\x15\x99\xbc\xb6\xc1\x46\xc8\x2c\xe0\x81\xb1\x4f\x05\x04\x96\xeb\x2d\xd8\x30\xf8\x94" +
	"\x0b\x13\x94\x5a\xad\xf9\xba\x78\x0a\x76\xc0\xa5\x09\x6c\xce\x6d\x60\x73\x08\x7c\xae\x16\x6c\x94\xf6\x5f\xd7\xc3" +
	"\x66\xd7\x41\xc9\x9d\x89\x5b\xd0\x81\x30\x81\x90\xf7\xbc\x10\x59\x88\x48\x7b\x43\x53\x25\x55\x2b\xcb\x9b\x5b\x6f" +
	"\x64\xc8\xaa\x12\x31\xc6\x3a\x8e\x7f\xb4\x44\xdf\xe9\x50\xc2\xa3\xfd\x28\xd6\x85\x90\xdb\x3b\xd9\x0e\xfd\x04\x1b" +
	"\xa5\xfd\xe5\xc7\x78\xd8\xc9\xaa\x29\x56\x7e\xce\x45\x91\x61\xeb\x3a\x4e\x16\xc8\x70\x23\xb4\xb1\x7e\x02\xa1\x55" +
	"\x23\x5b\x4b\x62\x67\x65\x81\x63\x62\xad\xac\x55\xbb\x13\x3e\x4e\xe9\xfa\xe9\x1e\x6d\xda\xab\xc3\xe1\xa6\xae\x5f" +
	"\x74\x38\x4c\x86\x8f\x70\xed\x19\x38\x97\x7c\xf2\xd1\x8b\xda\xe5\xbd\xa0\x57\x4b\xb9\x94\xc1\xbb\x46\x52\x23\xc9" +
	"\x0e\x82\xbc\xee\x08\x5e\x07\xf8\x5a\x95\x4e\xe1\xa6\xdf\xe4\x9a\x34\x35\x43\xb8\x94\xc1\xfb\xca\xd8\x60\x0d\xc1" +
	"\xb5\x55\xe5\x35\x0d\xae\x9b\x63\x5d\xd3\x40\xe9\xee\xee\x6d\x29\x03\x9c\x5b\x5b\x9a\x68\x3e\xdf\x0a\x9b\x57\xeb" +
	"\x30\x55\xbb\xf9\x03\xac\x4b\x9e\x7e\xbb\x71\x50\xa4\xc5\x7a\xee\x6d\xe1\xa6\xf0\x0c\x7e\xd7\x6c\xc5\x2d\x71\x71" +
	"\xb9\x4d\x78\x8f\x6d\x6c\x86\x02\x34\x3b\x3f\x78\x7c\xa6\x09\x45\x46\x5e\x57\xb6\xe8\xed\x10\xcc\x8b\xbe\xe4\x1a" +
	"\xa4\xfd\x5d\x65\x1d\x78\x4f\x6e\xe3\x71\x6f\xa8\x61\xa7\xee\xa1\x51\x08\x74\x37\x40\x55\x28\xda\x4b\x00\x20\xb1" +
	"\xfd\x81\x2d\xa6\xd3\x2a\x34\x2e\x5d\x72\x3b\xde\x92\x61\xc3\x7c\x08\x25\x3d\xcc\x37\xb7\xb9\x2d\x24\x63\xe4\x0f" +
	"\x3e\x14\xc6\x7d\xd4\x00\x5f\x21\x9b\xd0\x69\xdc\xa7\xeb\xc3\x27\xf3\x95\xeb\x3c\x35\x06\x11\x7a\xef\xd2\x96\x66" +
	"\x90\xd0\xc6\x2b\xa9\x1d\x38\xb8\x6f\xfc\xb4\x55\xc6\x37\x78\x32\xd8\x92\x70\xa3\xf4\x5b\x9e\xe6\x43\xd0\xf4\xb7" +
	"\x36\x06\xec\x8f\xd6\x69\xa3\xb2\x80\x25\xb5\x89\x5c\xb9\x8a\xa5\xa7\xb5\x1e\xf9\x3c\xd5\x54\x51\xe1\xf3\xce\xb0" +
	"\xaf\x41\xa6\x53\x08\x53\x63\xda\xbb\x3e\xc1\x46\x43\xb8\x19\xe9\xef\x3d\x46\xe1\xba\x8e\xfd\x18\x13\xb5\xa7\x66" +
	"\x84\xdc\x16\x60\x55\x9b\x35\x54\xcc\x85\x03\xc9\xf8\xe1\x80\x39\x73\x5e\x44\xa8\x66\x4f\xa3\xab\x67\x49\x2b\x3a" +
	"\xb9\x25\x54\x9d\xf7\x2e\x1a\x60\x0f\x20\xec\x71\xf0\x62\x96\xfc\xf9\xc3\x6f\xcf\xf5\xb7\xfa\x6a\x04\xf8\x67\xf3" +
	"\x34\xdc\xab\x6f\xff\xcd\xbc\x9f\x0a\xb5\x7e\x36\x4d\xbf\xc3\x97\x2e\xcd\x9f\xb3\x9b\x42\xc8\x6f\xff\x07\xb3\xe9" +
	"\x06\x34\x14\xac\xb1\x41\x93\x03\x58\xf4\x8c\x3d\x61\xeb\xa4\xfe\x4c\xe9\xea\xb4\x47\x15\x93\x83\x90\xa9\x60\x43" +
	"\xfa\xe3\xd2\x8d\x7b\xd0\xf6\x93\xfa\x71\x6d\x54\x51\x59\xf8\xac\x5d\x09\xaa\x62\xfc\xcc\xd8\xe1\x20\x88\xaf\x7c" +
	"\x53\xac\x09\x89\x95\x6b\xcf\x18\x5a\xca\x7f\xa1\x5c\xf9\x5f\x17\x28\x6a\x28\x50\x1a\x87\xe7\xcc\x21\xa9\x53\x1d" +
	"\x4e\xf4\x8a\xee\x6d\x7f\x79\xe4\x65\x59\x13\x6a\x18\x84\xb9\x86\x4d\xdc\xfc\xb0\x0b\x66\x83\x39\xa1\x66\x3a\xbd" +
	"\x60\x28\xd8\x90\xfa\xc8\x6e\x2d\x19\x67\xc9\x64\x5f\x62\x49\xa8\xf4\x94\x2f\x13\x68\xc6\x48\x4d\x22\x2c\xbd\x87" +
	"\x9c\xa8\xaa\x0b\xd3\xd6\x2b\x4a\x33\x1b\xfa\x04\x21\xd6\xce\x5f\x8f\x9c\x1e\xf9\x01\x44\xb5\x8f\xe1\x10\x7a\xc3" +
	"\xf8\xe8\x0c\x83\x8c\x3f\x1c\x9d\x4f\xf0\x68\x99\x6c\x42\x94\x4f\xba\x60\x14\xf3\x62\x72\x02\x9d\xe3\x78\x18\xc3" +
	"\x51\x9c\x3b\x31\x70\x47\xd7\x41\x2f\x96\xae\x98\x18\x0b\xe6\x82\x58\xea\xe1\xd1\x09\x03\x39\xba\xbb\x77\x58\xd2" +
	"\xfc\xf5\xe0\xe2\x3c\x23\x35\x66\x3a\x6d\x0f\xef\x3b\x7c\xcb\x75\xf5\x36\xe5\xbb\xfb\xaf\x16\xac\x62\x8d\x81\xd9" +
	"\x16\x4a\x14\x26\x75\x7d\xa9\xfe\x6f\xdf\x38\x2e\xbd\x5e\xfe\xf2\xf6\xa7\xcf\x7f\x9f\x4e\xdb\x9f\xb3\x68\xde\x49" +
	"\xe0\x3c\x6e\x7f\xca\x21\x18\x47\xc6\x20\x6d\x9e\x46\xd6\x10\x54\x06\xb2\x40\xc8\x80\x07\x52\xc9\x9b\xb5\x56\x0f" +
	"\x06\x74\x00\xf2\x5e\x68\x25\x1d\x35\x44\x62\x6c\x99\x3d\x1c\xf6\x75\x73\xa7\x6c\xd8\xd9\x13\xa4\x6d\x06\xee\xda" +
	"\xdf\x68\xef\x8a\xd9\x1e\x80\x0f\x07\xb4\x56\xaa\x00\x2e\xc7\x2b\x46\xc3\x63\xb4\x66\x0a\xbb\x4a\x6c\x14\xa3\xfd" +
	"\xf8\xf0\xc9\x90\x2b\x33\xd0\x30\xc7\x25\x2f\x78\xf8\x60\x5d\x52\xd4\x78\x9d\x64\x4d\x8e\xdc\x17\x60\xd8\x7b\xc6" +
	"\x18\x20\xfb\xd7\x4a\x97\x3d\x0b\xb6\x88\xc5\x1b\xd9\x25\xce\x62\xa8\x7a\x65\x22\x56\x31\x36\x4c\x27\xdc\xe5\xe7" +
	"\xc4\x97\x18\x37\x37\x54\x75\xc9\x6f\x0d\xd3\xe9\x06\x17\x2d\xd6\x35\x35\x44\x43\x4e\x9d\x91\x33\xce\x31\x1c\xac" +
	"\x61\xc3\x54\x22\x5a\x6a\x03\x2f\x15\x5b\xc4\xd5\x1b\x73\x5c\x35\x54\x4d\xd5\xe0\x8b\x85\x6a\x85\x49\x9c\x41\x01" +
	"\x16\x02\x9d\x18\xc7\x91\xab\x0c\xfc\x99\x77\xec\xec\x36\x72\xb8\x4d\x3a\x7e\x63\x19\x3d\xc3\x32\x49\x9d\x7f\x15" +
	"\x16\x34\xfe\xa9\xd1\xd7\xd1\x65\x47\x8d\x47\xe5\x59\xf3\x14\xef\x1f\x74\xda\x47\xbc\x3b\x84\x22\xed\x7c\xe3\x7f" +
	"\xe6\xf2\x3b\x9f\x54\xc5\x7d\xbd\x24\x4e\x23\x54\xef\xc0\xca\x15\x8b\x10\xa6\xce\xcb\x5d\x87\x89\x79\x62\x57\x0e" +
	"\x73\xc6\xd0\xe0\xfa\x08\xe5\xad\xa8\xee\xe0\x38\x81\x13\xd4\x8f\x47\xc7\x90\x21\x48\x5d\xff\x2b\x57\x72\x97\x7c" +
	"\xb2\xbb\x1d\x38\xb9\xee\xf5\xb5\xcb\x05\x4f\xdc\x88\x47\x17\x99\x02\x0d\xff\xac\x84\x06\x13\x9c\xac\x6b\x5e\x96" +
	"\x26\x70\x38\x5c\x78\x56\x3f\x7a\xd6\x77\x38\xec\x5f\x58\x53\x55\xcc\xd0\x7c\x8e\x66\xd6\x3f\x1c\x52\xcd\xe4\xcc" +
	"\x86\x25\xb7\xb9\xe4\x3b\x27\xa4\xb2\xe0\x29\xe0\xf9\x72\x9e\x7c\x59\xce\x57\x2f\xae\xe6\x14\xcd\x87\x90\x3f\x9a" +
	"\x51\xe9\x62\x69\x5e\x2c\x31\xc6\x77\x51\xf2\x85\xe0\xd5\x61\xd9\x37\x67\x87\x25\xf6\x8d\x17\x4b\x42\xfc\x7f\xb2" +
	"\x24\xf3\xad\xa0\xe7\x11\x42\xd1\x26\x65\x13\x3b\x4c\x06\xe2\x5f\x10\x0e\x5f\x10\x74\x35\xa7\x17\x9f\xd8\x6d\x3d" +
	"\x9e\x7b\xed\xe6\x5e\xff\xc9\xdc\x96\xfb\xf9\x17\xfc\xdd\xc1\x07\xee\x83\x2b\x0e\xa2\xe5\x7c\x39\x3f\x34\x65\x82" +
	"\x6f\x6e\x44\x01\xbe\xb5\x9c\x1f\x96\xe6\xc5\x15\x99\x8b\xd0\x82\xb1\x58\x90\x3b\x88\xb0\x62\xce\x05\x45\x9f\x87" +
	"\x3b\x31\x92\x3b\x11\x9d\xf6\x22\x72\x27\x67\x22\xd2\x33\x31\xe2\x71\x19\x2e\xe7\x73\x8a\x10\xa1\xa8\xd2\x05\x46" +
	"\xb3\xb3\x04\xc0\x5f\x6a\xd5\xfe\x4a\x3f\xfe\xaf\x00\x00\x00\xff\xff\x7d\xdb\xbf\x63\x96\x23\x00\x00")

func bindataFrontendAppjsBytes() ([]byte, error) {
	return bindataRead(
		_bindataFrontendAppjs,
		"frontend/app.js",
	)
}



func bindataFrontendAppjs() (*asset, error) {
	bytes, err := bindataFrontendAppjsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "frontend/app.js",
		size: 9110,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataFrontendIndexhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5d\x53\xdb\xbc\x12\xbe\xef\xaf\x50\x7d\x2e\xa9\xac\x24\x84\x10" +
	"\xce\xd8\x99\x21\x04\x0a\xa4\x26\xe5\xb3\x94\x3b\xc5\x5a\xdb\x4a\x64\xc9\x91\x64\x9b\xf0\xeb\xcf\xd8\xf9\xa4\xa7" +
	"\xf0\x86\x4e\x5f\x6e\x84\x76\xb5\xbb\xcf\xb3\xbb\xd9\x6c\xbc\xcf\x4c\x85\x76\x9e\x01\x4a\x6c\x2a\x7a\x9f\xbc\xea" +
	"\x40\x82\xca\xd8\x77\x40\x3a\xbd\x4f\x08\x79\x09\x50\x56\xfd\x83\x90\xf7\x19\x63\x74\x03\xb3\x9c\x6b\x60\x28\x05" +
	"\x4b\x91\xa5\xb1\x41\x18\x2f\xf5\xb5\x28\x4c\xa8\x36\x60\x7d\x27\xb7\x11\xee\x3a\xdb\xaa\xc4\xda\x0c\x57\xf6\x85" +
	"\xef\x3c\xe2\xfb\x63\x7c\xa2\xd2\x8c\x5a\x3e\x16\xe0\xa0\x50\x49\x0b\xd2\xfa\xce\xc5\xa9\x0f\x2c\x86\x57\x96\x92" +
	"\xa6\xe0\x3b\x05\x87\x32\x53\xda\x6e\x3d\x2e\x39\xb3\x89\xcf\xa0\xe0\x21\xe0\xfa\xf2\x05\x71\xc9\x2d\xa7\x02\x9b" +
	"\x90\x0a\xf0\x9b\x5f\x90\x49\x34\x97\x53\x6c\x15\x8e\xb8\xf5\xa5\x72\x7a\x9f\x36\x84\xfa\x4a\x59\x63\x35\xcd\xd0" +
	"\xc9\xed\xed\x86\x8b\xe0\x72\x8a\x34\x08\xdf\x31\x76\x2e\xc0\x24\x00\xd6\x41\x89\x86\xc8\x77\x2a\x1e\xe6\xbf\x84" +
	"\x84\x4c\x4e\x8c\x1b\x0a\x95\xb3\x48\x50\x0d\x6e\xa8\x52\x42\x27\xf4\x99\x08\x3e\x36\xc4\x96\xdc\x5a\xd0\x78\xbc" +
	"\x8a\x40\xda\x6e\xc3\x6d\x90\xd0\x18\xb2\x96\xb9\x29\x97\x6e\x68\x8c\x53\x87\x5d\xfc\x71\x69\x21\xd6\xdc\xce\x7d" +
	"\xc7\x24\xb4\x75\xd0\xc1\xdf\x8e\xbb\x47\x2f\x7b\xd3\xa3\x68\x12\x07\xc3\x6b\x32\x9d\xb5\x47\xa3\x56\xa0\xa3\xee" +
	"\x83\xb0\x3f\x53\x41\x1e\x4e\x6f\xf7\x6e\xe2\x46\x94\xb4\x1a\xbe\x83\x42\xad\x8c\x51\x9a\xc7\x5c\xfa\x0e\x95\x4a" +
	"\xce\x53\x95\x1b\x07\x91\xbf\xc7\xad\xc6\x5f\x52\x1b\x26\x4b\x52\x8c\xea\xa9\x98\x7f\x94\xd7\x38\x19\xb4\xc9\x80" +
	"\x9d\x1c\x67\x57\xc7\x3f\xc5\x28\x2b\x86\xc6\xdc\xd3\x56\x32\x68\x0c\xf2\xee\xb3\x8e\x47\x85\xfd\xd9\x2e\x5b\x07" +
	"\x26\x09\xde\xe7\xb5\x3b\xb1\xdc\x80\x1b\x29\x69\x69\x09\x46\xa5\x0b\x5e\x1a\x04\x50\x03\x86\x14\x07\x6e\xc3\x6d" +
	"\x2e\x4a\x44\x85\x78\x9f\xc0\x7e\xb7\x8d\xf7\x58\xe3\x7b\x77\x5f\x1e\x4d\xe9\x75\x70\x52\x4e\xba\x67\xed\x9b\xcb" +
	"\x7e\xa7\x63\x5f\x2e\xca\xd1\x30\xd5\x6c\xdc\xee\xec\x65\x4a\x0f\xc8\xa8\xd0\x97\x7b\xfb\x87\x3f\x66\x17\xc1\xe1" +
	"\xbd\xea\xdb\xf2\x7c\xd4\xb9\x12\xf1\x9b\xa4\xfe\x5e\xa9\x12\x1e\x27\x82\xc7\x89\x75\x27\x86\x1c\xb9\xcd\x96\xdb" +
	"\x20\x0b\x67\x84\x4a\xa6\x15\x67\xc6\xe6\x8c\xab\xdd\x2a\xa6\x4f\x1f\xe4\x1c\x82\x68\x3a\x7c\x49\xfb\xa5\x0a\x19" +
	"\x00\x9f\x7d\x1d\xe5\xcd\x80\x58\x7b\x7f\xde\x3f\x1c\x36\x52\x18\x5e\x94\xb3\xa2\xdc\xa5\x62\x96\x5b\x01\xbd\xdb" +
	"\x84\x6a\xf0\xc8\xe2\x52\x0d\x1d\xb2\x9a\x3a\xde\x58\xb1\xf9\x32\x17\x92\x16\x28\x14\xd4\x18\xdf\x91\xb4\x18\x53" +
	"\x8d\x16\x07\x86\xe7\x8c\x4a\x86\x45\xbc\x12\x54\xcd\x88\xc6\x31\xce\x34\x4f\xa9\x9e\x2f\x93\x89\x90\x47\x5f\x3b" +
	"\xc0\x63\x4d\x25\x5b\xe5\xf3\x3f\x4e\xcf\xe3\xab\x07\x11\x35\x28\xa2\xd8\x54\xc8\x30\x15\x16\x9b\x59\x4e\x35\x38" +
	"\x3d\x8f\xf0\xde\x3a\x43\x9e\xc9\xa8\x5c\x99\xd0\x2c\xab\x19\x38\x2b\x3e\x95\xb2\xe7\x11\xba\xc4\x4f\x24\x2d\x56" +
	"\xbc\x19\x5f\x73\xa9\x66\x19\xe5\x12\x34\x32\x89\x2a\xb1\x50\x94\x71\x19\x6f\x30\x27\xcd\xad\x78\xff\x87\x2f\xe3" +
	"\xb2\x32\x8d\x28\xce\x72\x61\xc0\x41\x54\x73\x8a\x13\xce\x18\x48\xdf\xb1\x3a\x7f\x0d\xd9\x23\x2b\x77\x1e\x61\x7c" +
	"\x07\x38\x31\x48\xd0\x3c\xdc\x11\x4e\xdd\x84\x98\xa9\x52\x56\x34\xaa\xbc\xbd\x11\xbd\x72\xd4\xea\x79\x74\x9d\xfa" +
	"\xb5\x23\x2e\xa0\x6a\x7a\x5c\x29\x50\x75\xab\x66\xbf\xd3\xcb\x65\x9d\x5b\x56\xa5\xd3\x23\x49\xeb\x43\x24\x78\x4a" +
	"\x63\x40\x16\x9e\x2d\x0e\x41\x5a\xd0\xdb\x1d\xf1\x2e\x02\x67\x9b\x6c\x1a\x23\xa3\x43\xdf\x59\x3f\xe5\x69\x8c\x23" +
	"\x91\x73\x86\xd6\x46\x46\x6f\xe5\x6a\x53\xfa\x9d\x60\x16\x9c\x81\xda\x58\x6f\x3d\x84\x74\x0c\x0c\x6b\x30\x99\x92" +
	"\x86\x17\x80\x7e\x15\xe0\x66\x67\x3c\x3f\xda\x46\x5b\x3b\xab\xbf\x28\xb5\x12\x66\x4b\x41\x6a\xcd\x06\x63\x0d\xed" +
	"\x03\x28\x69\x35\x2c\xde\x48\x66\xad\x5a\xc7\xf4\x48\x2d\xf8\x90\xf7\xca\xef\xc6\x61\xa6\xa1\xe7\x85\x8a\x41\xcf" +
	"\x23\xcb\xa3\x12\x7d\xc4\x21\x68\xad\xf4\x8e\xed\x0b\xcf\xa1\xa0\x29\xb5\x5c\x49\x1c\x72\x1d\x8a\xb7\x3e\x3c\x75" +
	"\xfb\xae\x8b\xb3\x88\xf0\x46\x57\x56\x3b\xc6\xe4\x3a\x07\x3d\x47\x11\xd7\xc6\x7e\x41\x36\x01\x89\xbe\xab\x2c\x03" +
	"\xed\x4e\xcc\xf2\xbe\x59\x43\x2e\xb7\xb6\x10\x13\x6a\x9e\xd9\x45\xd7\xed\x38\xee\x27\xb3\x2a\x16\xd9\x77\xf7\xdd" +
	"\xe6\xf2\x52\x4f\xf6\xc9\xab\xc1\xfe\xbb\xd1\x7e\x16\x67\x27\x63\x32\xbc\xbc\x16\xdf\xae\xa2\x51\x7e\xd4\xb4\x74" +
	"\xbf\xa5\xc8\x55\xf0\xf4\x2c\x6c\x79\xa3\xba\xd7\x36\x9d\x06\x37\xec\x38\xef\xbe\x3d\xda\x7b\x1e\x59\x80\xfe\x73" +
	"\x06\xd9\x2a\x35\xa4\xe9\x36\xdb\x6e\x73\x25\xd8\x8d\xc5\xed\x5d\x2b\x80\x50\x3f\xea\x4b\x7a\x6c\x66\x69\x94\x4d" +
	"\x8f\x1e\x6f\xae\x2f\xee\xc4\x40\xcd\x83\xf4\xde\xc6\xc3\xfe\xa9\x64\x03\x6e\x6e\xc3\x7f\x95\xc5\x5b\xdb\xdf\xe4" +
	"\xd7\xe5\xef\x9f\x29\x1d\xec\x35\x5a\x2f\xf9\xc1\xfd\xfd\xb7\xeb\xe9\xe8\xb0\x6c\x7e\xbd\xd0\x9d\x22\xb2\x27\x71" +
	"\x10\x9d\xb1\xa7\xf0\xf8\x1c\x06\xf6\x4c\x0e\x9f\x4c\xdf\xec\x44\xe9\x8f\x39\xfd\x6e\x95\xd8\xc8\x76\x23\x43\xfa" +
	"\x11\xbf\x98\x9e\x8b\x73\xf5\xc0\x93\x27\x16\x76\xee\xce\xf2\xc9\x61\x90\x5e\x36\xee\x7e\x84\x3f\x4c\xf0\x38\x85" +
	"\xc1\x59\x99\xf0\xc6\xcb\x3b\x0b\xc4\xbb\x64\x68\x96\x55\x38\x5e\xd5\xd0\x23\x8b\x45\xc2\x23\x8b\x5f\x3a\xff\x0b" +
	"\x00\x00\xff\xff\x57\x02\x19\x71\xfa\x0c\x00\x00")

func bindataFrontendIndexhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataFrontendIndexhtml,
		"frontend/index.html",
	)
}



func bindataFrontendIndexhtml() (*asset, error) {
	bytes, err := bindataFrontendIndexhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "frontend/index.html",
		size: 3322,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"frontend/app.js":     bindataFrontendAppjs,
	"frontend/index.html": bindataFrontendIndexhtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"frontend": {Func: nil, Children: map[string]*bintree{
		"app.js": {Func: bindataFrontendAppjs, Children: map[string]*bintree{}},
		"index.html": {Func: bindataFrontendIndexhtml, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
